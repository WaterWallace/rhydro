% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ceemdanFilter.R
\name{ceemdanFilter}
\alias{ceemdanFilter}
\title{Apply ceemdan to a data set}
\usage{
ceemdanFilter(time, data, output = 0, method = "ceemdan", d1 = 16, d2 = 25)
}
\arguments{
\item{time}{Vector, POSIXct time, must be even intervals, i.e. hourly}

\item{data}{Numeric, noisy or cyclical data to be filtered/decomposed}

\item{output}{0, 1, 2 or 3
0 = Output all below as a list
1 = Output the grouped imfs, groupled by d1 and d2
2 = Output period and amplitude of each imf
3 = Ouptut each imf}

\item{method}{"emd" or "ceemdan"}

\item{d1}{Numeric, hours to filter below}

\item{d2}{Numeric, hours to filter above}
}
\value{
list or dataframe (depending on "output")
either the entire list of all parameters
}
\description{
\if{html}{\out{<div class="sourceCode">}}\preformatted{Applies ceemdan and merges similar period imfs,
also calculates periods, amplitudes of each imfs
}\if{html}{\out{</div>}}
}
\examples{

library(ccInterp)
library(ggplot2)
library(reshape2)
#library(ggpubr)

# make some random data
randomMinutes <- rnorm(10000, mean = 60, sd = 30) # create 1000 random intervals
randomMinutes[randomMinutes < 1] <- 1 # set less than 1 minute to 1
randomMinutes <- as.POSIXct(cumsum(randomMinutes)*60, origin="2021-01-01")
# build a data frame of times and values
df <- data.frame(Time = randomMinutes,
               data = cumsum(rnorm(10000, mean = 0, sd = 10))   # add a row of random numbers
)
# add some noise
t <- as.numeric(df$Time)/60/60/24 # time in days
inputnoise <- 100 * sin( (12+(25/60)) * 2*pi * t) + # 12 hour frequency, amplitude 2
20 * sin( 2*(12+(25/60)) * 2*pi * t) + # 24 hour frequency, amplitude 1
50 * sin( ( 1/28 ) * 2*pi * t) + # monthly frequency, amplitude 0.2
10 * sin( ( 1/365 ) * 2*pi * t) # yearly frequency, amplitude 0.1
inputdata <- df
inputdata <- cbind(inputdata, inputnoise)
df$data <- df$data + inputnoise

# change to hourly
hourlydf <- changeInterval(df, Interval = "Hourly", option="inst", offset = 30)
# plot raw data
rawPlot <- ggplot(hourlydf, aes(x=Date))+
  geom_line(aes(y = Inst), color = "black")

# filter out above and below 16 to 25 hours
emdFilteredShort <- ceemdanFilter(hourlydf$Date, hourlydf$Inst,  output = 1, d1=16, d2=25)
emdFilteredShortMelt <- melt(emdFilteredShort, id="time")
names(emdFilteredShortMelt)[2] <- "Frequency"
emdFilteredPlotShort <- ggplot(emdFilteredShortMelt, aes(x=time, y=value, colour=Frequency)) +
  geom_line()

# filter out above and below 1000 to 3000 hours
emdFilteredLong <- ceemdanFilter(hourlydf$Date, hourlydf$Inst, output = 1, d1=360, d2=1500)
emdFilteredLongMelt <- melt(emdFilteredLong, id="time")
names(emdFilteredLongMelt)[2] <- "Frequency"
emdFilteredPlotLong <- ggplot(emdFilteredLongMelt, aes(x=time, y=value, colour=Frequency)) +
  geom_line()
RawAndAddedNoise <- ggplot(df, aes(x=Time, y=data)) +
  geom_line(colour="grey") +
  geom_line(data = inputdata, aes(x = Time, y = data),  colour="blue")

# output raw (added noise data), with the 16/25 ceemdan, and 360/1500 ceemdan
#ggarrange(rawPlot, emdFilteredPlotShort, emdFilteredPlotLong, nrow=3, ncol=1)

RawAndDenoised <- ggplot(inputdata, aes(x=Time, y=data)) +
  geom_line(colour="grey") +
  geom_line(data = emdFilteredLong, aes(x = time, y = above1500),  colour="red") +
  geom_line(data = emdFilteredShort, aes(x = time, y = above25),  colour="blue")

# output raw data, with the 1500 hour residual in red and 26 hour residual in blue
RawAndDenoised
# raw (added noise data), with raw input data (blue - no noise added), and ceemdan denoised (red)
rawPlot +
  geom_line(data = inputdata, aes(x = Time, y = data),  colour="blue") +
  geom_line(data = emdFilteredShort, aes(x = time, y = above25),  colour="red")
}
